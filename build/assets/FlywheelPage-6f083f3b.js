import{t as g,F,u as I,v as u,M as i,x as O,y as C,r as a,j as t,C as S,b as p,D as x,e as k}from"./index-66dd5fa2.js";import{S as N,N as W}from"./NumberInput-4a855056.js";import{S as H,u as E,a as r}from"./L1ControlledNumber-4bce0d8c.js";import{B as T}from"./BooleanInput-ab4fbc61.js";import{M as m}from"./MeasurementInput-89968d28.js";import{M as q,R as v}from"./RatioInput-41aa2d7d.js";import{M as c}from"./MeasurementOutput-93ceb668.js";import{a as P,b as D,K as L}from"./sharedMath-0af797f2.js";import{F as A}from"./readmes-e78b4272.js";import"./io-df8bba7d.js";class V{static v1ToV2=o=>({shooterRadius:o.radius,shooterMomentOfInertia:o.momentOfInertia,shooterTargetSpeed:o.targetSpeed,shooterWeight:o.weight,useCustomShooterMoi:o.useCustomMoi,motor:o.motor,motorRatio:o.ratio,currentLimit:u.currentLimit,flywheelRadius:u.flywheelRadius,flywheelMomentOfInertia:u.flywheelMomentOfInertia,flywheelRatio:u.flywheelRatio,flywheelWeight:u.flywheelWeight,projectileRadius:u.projectileRadius,projectileWeight:u.projectileWeight,useCustomFlywheelMoi:u.useCustomFlywheelMoi,efficiency:u.efficiency})}class U{static getState(){if(g.version===void 0)throw Error("Config did not set version! "+g.url);return H.BumpState(g.version,[F,I],[V.v1ToV2])}}function K(e,o,l,s,y){if(o.quantity===0||s.asNumber()===0)return new i(0,"s");const d=new O(o,l,{rpm:new i(0,"rpm"),voltage:C}).solve().torque;if(d.baseScalar===0)return new i(0,"s");const w=e.mul(o.freeSpeed.div(s.asNumber())).div(d.mul(o.quantity)).negate(),n=o.freeSpeed.div(s.asNumber()).sub(y),f=o.freeSpeed.div(s.asNumber()),h=n.div(f).baseScalar;if(h<=0)return new i(0,"s");const R=Math.log(h);return w.removeRad().mul(R).to("s")}function B(e,o){return e.mul(o).removeRad().to("ft/s")}function J(e,o,l){return i.anyAreZero(o,e)?new i(0):l.mul(20).div(e.mul(o.mul(2)).mul(o.mul(2)).mul(7).add(l.mul(40)))}function Z(e,o,l,s){return s.mul(J(e,o,l))}function z(e,o){return o.mul(e).mul(e).mul(.7).to("J")}function G(e,o){return e.mul(o).mul(o).mul(.5).removeRad().removeRad().to("J")}function Q(e,o,l){if(i.anyAreZero(e))return new i(0,"rpm");const s=o.sub(l).div(e.mul(.5)).mul(new i(1,"rad^2")).to("rpm^2");return s.lt(new i(0,"rpm^2"))?new i(0,"rpm"):new i(Math.sqrt(s.scalar),"rpm")}function X(e,o,l,s,y,d,w){if(o.quantity===0||l.asNumber()===0)return new i(0,"s");const n=o.freeSpeed.div(l.asNumber()),f=new O(o,w,{voltage:C,rpm:new i(0,"rpm")}).solve().torque;if(f.scalar===0)return new i(0,"s");const h=e.negate().mul(n),R=f.mul(o.quantity),j=n.sub(y.mul(1-s)),b=n.sub(d),M=Math.log(j.div(b).scalar);return isNaN(M)?new i(0,"s"):h.mul(M).div(R).removeRad().to("s")}function Y(){const[e,o]=E(U.getState()),l=a.useMemo(()=>K(e.shooterMomentOfInertia.add(e.flywheelMomentOfInertia.div(e.flywheelRatio.asNumber()==0?1:Math.pow(e.flywheelRatio.asNumber(),2))),e.motor,e.currentLimit,e.motorRatio,e.shooterTargetSpeed),[e.motor,e.currentLimit,e.motorRatio,e.shooterTargetSpeed,e.shooterMomentOfInertia,e.flywheelMomentOfInertia,e.flywheelRatio]),s=a.useMemo(()=>e.motorRatio.asNumber()===0?new i(0,"rpm"):e.motor.freeSpeed.div(e.motorRatio.asNumber()),[e.motorRatio,e.motor.freeSpeed]),y=a.useMemo(()=>B(e.shooterTargetSpeed,e.shooterRadius),[e.shooterTargetSpeed,e.shooterRadius]),d=a.useMemo(()=>Z(e.projectileWeight,e.shooterRadius,e.shooterMomentOfInertia.add(e.flywheelMomentOfInertia.div(e.flywheelRatio.asNumber()==0?1:Math.pow(e.flywheelRatio.asNumber(),2))),y),[e.projectileWeight,e.shooterRadius,e.shooterMomentOfInertia,e.flywheelMomentOfInertia,e.flywheelRatio,y]),w=a.useMemo(()=>z(d,e.projectileWeight),[d,e.projectileWeight]),n=a.useMemo(()=>G(e.shooterMomentOfInertia.add(e.flywheelMomentOfInertia.div(e.flywheelRatio.asNumber()==0?1:Math.pow(e.flywheelRatio.asNumber(),2))),e.shooterTargetSpeed),[e.shooterMomentOfInertia,e.flywheelMomentOfInertia,e.flywheelRatio,e.shooterTargetSpeed]),f=a.useMemo(()=>Q(e.shooterMomentOfInertia.add(e.flywheelMomentOfInertia.div(e.flywheelRatio.asNumber()==0?1:Math.pow(e.flywheelRatio.asNumber(),2))),n,w),[e.shooterMomentOfInertia,e.flywheelMomentOfInertia,e.flywheelRatio,n,w]),h=a.useMemo(()=>e.motorRatio.asNumber()===0?new i(0,"in^2 * lbs"):e.shooterMomentOfInertia.add(e.flywheelMomentOfInertia.div(e.flywheelRatio.asNumber()==0?1:Math.pow(e.flywheelRatio.asNumber(),2))).div(e.motorRatio.asNumber()),[e.shooterMomentOfInertia,e.flywheelMomentOfInertia,e.flywheelRatio,e.motorRatio]),R=a.useMemo(()=>X(h,e.motor,e.motorRatio,1/100,e.shooterTargetSpeed,f,e.currentLimit),[h,e.motor,e.motorRatio,e.shooterTargetSpeed,f,e.currentLimit]),j=a.useMemo(()=>e.motorRatio.asNumber()==0?new i(0,"V*s/m"):P(e.motor.freeSpeed.div(e.motorRatio.asNumber()),e.shooterRadius),[e.motor.freeSpeed,e.motorRatio,e.shooterRadius]),b=a.useMemo(()=>e.flywheelRadius.scalar==0?new i(0,"V*s^2/m"):D(e.motor.stallTorque.mul(e.motor.quantity).mul(e.motorRatio.asNumber()).mul(e.efficiency/100),e.shooterRadius,h.div(e.flywheelRadius.mul(e.flywheelRadius))),[e.motor.stallTorque,e.motor.quantity,e.motorRatio,e.efficiency,e.flywheelRadius,h,e.shooterRadius]);return a.useEffect(()=>{e.useCustomShooterMoi||o.setShooterMomentOfInertia(e.shooterRadius.mul(e.shooterRadius).mul(e.shooterWeight).div(2))},[e.shooterRadius,e.shooterWeight,e.useCustomShooterMoi]),a.useEffect(()=>{if(!e.useCustomFlywheelMoi){const M=e.flywheelRadius.mul(e.flywheelRadius).mul(e.flywheelWeight).div(2);o.setFlywheelMomentOfInertia(e.flywheelRatio.asNumber()===0?M.mul(0):M)}},[e.flywheelRadius,e.flywheelWeight,e.useCustomFlywheelMoi,e.flywheelRatio]),t.jsxs(t.Fragment,{children:[t.jsx(N,{state:e,title:g.title,queryParams:I}),t.jsxs(S,{multiline:!0,children:[t.jsxs(p,{children:[t.jsx(r,{label:"Motor",id:"motor",tooltip:"The motors powering the system.",children:t.jsx(q,{stateHook:[e.motor,o.setMotor]})}),t.jsx(r,{label:"Efficiency (%)",id:"efficiency",tooltip:"The efficiency of the system in transmitting torque from the motors.",children:t.jsx(W,{stateHook:[e.efficiency,o.setEfficiency]})}),t.jsx(r,{label:"Current Limit",id:"currentLimit",tooltip:"The current limit applied to each motor.",children:t.jsx(m,{stateHook:[e.currentLimit,o.setCurrentLimit]})}),t.jsx(r,{label:"Shooter Ratio",id:"shooterRatio",tooltip:"The ratio between the motors and the shooter wheel(s).",children:t.jsx(v,{stateHook:[e.motorRatio,o.setMotorRatio]})}),t.jsx(r,{label:"Shooter Max Speed",id:"shooterMaxSpeed",tooltip:"The max possible speed of the shooter wheel(s).",children:t.jsx(c,{stateHook:[s,()=>{}],numberRoundTo:0})}),t.jsx(r,{label:"Target Shooter RPM",id:"shooterRPM",tooltip:"The desired speed of the shooter wheel(s).",children:t.jsx(m,{stateHook:[e.shooterTargetSpeed,o.setShooterTargetSpeed],dangerIf:()=>e.shooterTargetSpeed.gte(s)})}),t.jsx(r,{label:"Projectile Weight",id:"projectileWeight",tooltip:"The weight of the ball you are shooting.",children:t.jsx(m,{stateHook:[e.projectileWeight,o.setProjectileWeight]})}),t.jsx(x,{color:"primary",children:"Shooter Wheel Properties"}),t.jsx(r,{label:"Shooter Radius",id:"shooterRadius",tooltip:"The radius of the shooter wheel(s).",children:t.jsx(m,{stateHook:[e.shooterRadius,o.setShooterRadius],numberDisabledIf:()=>e.useCustomShooterMoi})}),t.jsx(r,{label:"Shooter Weight",id:"shooterWeight",tooltip:"The weight of the shooter wheel(s).",children:t.jsx(m,{stateHook:[e.shooterWeight,o.setShooterWeight],numberDisabledIf:()=>e.useCustomShooterMoi})}),t.jsxs(S,{formColumns:!0,children:[t.jsx(p,{ofTwelve:5,children:t.jsx(r,{label:"Use Custom Shooter MOI",id:"useCustomShooterMOI",tooltip:"Use if you already have a moment of inertia for your shooter wheel(s), likely from CAD.",children:t.jsx(T,{stateHook:[e.useCustomShooterMoi,o.setUseCustomShooterMoi]})})}),t.jsx(p,{children:t.jsx(r,{label:"Custom Shooter MOI",id:"customShooterMOI",tooltip:"The moment of inertia of the shooter wheel(s).",children:t.jsx(m,{stateHook:[e.shooterMomentOfInertia,o.setShooterMomentOfInertia],numberDisabledIf:()=>!e.useCustomShooterMoi,numberRoundTo:1})})})]}),t.jsx(x,{color:"primary",children:"Flywheel Properties"}),t.jsx(r,{label:"Flywheel Radius",id:"flywheelRadius",tooltip:"The radius of the weighted flywheel.",children:t.jsx(m,{stateHook:[e.flywheelRadius,o.setFlywheelRadius],numberDisabledIf:()=>e.useCustomFlywheelMoi})}),t.jsx(r,{label:"Flywheel Weight",id:"flywheelWeight",tooltip:"The weight of the weighted flywheel. Use zero if you don't have one.",children:t.jsx(m,{stateHook:[e.flywheelWeight,o.setFlywheelWeight],numberDisabledIf:()=>e.useCustomFlywheelMoi})}),t.jsx(r,{label:"Flywheel:Shooter Ratio",id:"flywheelShooterRatio",tooltip:"The ratio between the flywheel and the shooter wheel(s). Use 1 if coaxial.",children:t.jsx(v,{stateHook:[e.flywheelRatio,o.setFlywheelRatio]})}),t.jsxs(S,{formColumns:!0,children:[t.jsx(p,{ofTwelve:5,children:t.jsx(r,{label:"Use Custom Flywheel MOI",id:"useCustomFlywheelMOI",tooltip:"Use if you already have a moment of inertia for your flywheel, likely from CAD or a vendor.",children:t.jsx(T,{stateHook:[e.useCustomFlywheelMoi,o.setUseCustomFlywheelMoi]})})}),t.jsx(p,{children:t.jsx(r,{label:"Custom Flywheel MOI",id:"customFlywheelMOI",tooltip:"The moment of inertia of the flywheel.",children:t.jsx(m,{stateHook:[e.flywheelMomentOfInertia,o.setFlywheelMomentOfInertia],numberDisabledIf:()=>!e.useCustomFlywheelMoi,numberRoundTo:1})})})]})]}),t.jsxs(p,{children:[t.jsx(x,{color:"primary",children:"Outputs"}),t.jsx(r,{label:"Estimated Windup Time",id:"windupTime",tooltip:"The estimated time it takes the system to reach the target speed from rest.",children:t.jsx(c,{stateHook:[l,()=>{}],numberRoundTo:2})}),t.jsx(r,{label:"Estimated Recovery Time",id:"recoveryTime",tooltip:"The estimated time it takes the system to reach the target speed immediately following a shot.",children:t.jsx(c,{stateHook:[R,()=>{}],numberRoundTo:4})}),t.jsx(r,{label:"Shooter Wheel Surface Speed",id:"surfaceSpeed",tooltip:"The speed of the surface of the shooter wheel(s).",children:t.jsx(c,{stateHook:[y,()=>{}],numberRoundTo:2})}),t.jsx(r,{label:"Estimated Projectile Speed",id:"projectileSpeed",tooltip:"The estimated speed of the projectile after being shot.",children:t.jsx(c,{stateHook:[d,()=>{}],numberRoundTo:2})}),t.jsx(r,{label:"Estimated Speed After Shot",id:"speedAfterShot",tooltip:"The estimated speed of the shooter wheels immediately following a shot.",children:t.jsx(c,{stateHook:[f,()=>{}],numberRoundTo:0})}),t.jsx(r,{label:"Flywheel Energy",id:"flywheelEnergy",tooltip:"The energy stored in the flywheel.",children:t.jsx(c,{stateHook:[n,()=>{}],numberRoundTo:0})}),t.jsx(r,{label:"Projectile Energy",id:"projectileEnergy",tooltip:"The amount of energy transferred into the projectile in a shot.",children:t.jsx(c,{stateHook:[w,()=>{}],numberRoundTo:0})}),t.jsx(L,{kV:j,kA:b,distanceType:"linear"})]})]})]})}function ne(){return t.jsxs(t.Fragment,{children:[t.jsx(k,{pageConfig:g}),t.jsx(Y,{}),t.jsx(A,{})]})}export{ne as default};
